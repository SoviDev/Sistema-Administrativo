¡Perfecto! A continuación, te presento una versión final del prompt unificado y optimizado para tu entorno completo, que incluye lo mejor del prompt de frontend con React, Tailwind, Axios y lo mejor del backend con Django, FastAPI, PostgreSQL, Celery, Redis y Nginx.

Este prompt está pensado para usarse en Cursor.com, asegurando calidad profesional, buenas prácticas, experiencia de usuario y control total sobre los cambios realizados.

🎯 PROMPT UNIFICADO PARA CURSOR.COM
Stack: Django · FastAPI · React · TailwindCSS · Axios · PostgreSQL · Celery · Redis · Nginx

🔍 Requisitos generales
Estoy desarrollando una aplicación moderna y escalable. El stack completo es:

Backend: Django, FastAPI

Frontend: React con TailwindCSS

HTTP Client: Axios

Base de datos: PostgreSQL

Tareas en segundo plano: Celery + Redis

Servidor web: Nginx

Quiero que todas las respuestas, sugerencias y fragmentos de código cumplan con lo siguiente:

📚 Documentación y buenas prácticas
Basarse exclusivamente en la documentación oficial de cada tecnología.

Usar las funcionalidades integradas de Django o React antes de considerar dependencias externas.

Respetar las mejores prácticas de seguridad, escalabilidad, rendimiento, mantenibilidad y claridad.

Preferir soluciones claras y estructuradas antes que optimizaciones prematuras.

💻 Backend (Django, FastAPI, DRF)
Cumplir con el estilo de código PEP8.

Usar CBVs (Class-Based Views) para lógica compleja y FBVs para vistas simples.

Usar siempre el ORM de Django en lugar de SQL crudo, salvo casos justificados.

Utilizar serializers de DRF y ModelForms para validación.

Seguir estrictamente el patrón MVT (Model-View-Template).

Mantener la lógica de negocio en models y forms, y las vistas ligeras.

Definir URLs RESTful de forma clara en urls.py.

Aplicar seguridad Django: CSRF, XSS, SQLi protection, etc.

Implementar tareas con Celery y Redis, y usar vistas asíncronas cuando sea necesario.

Usar select_related y prefetch_related para optimizar consultas.

Implementar tests con unittest o pytest-django.

Estructurar la aplicación de forma modular usando apps reutilizables.

⚙️ Frontend (React, TailwindCSS, Axios)
Escribir el código como lo haría un desarrollador senior con experiencia profesional.

Usar TailwindCSS para todos los estilos, sin CSS externos o inline.

Utilizar class: en lugar de operadores ternarios para clases condicionales si aplica.

Los eventos deben nombrarse con el prefijo handle (handleClick, handleSubmit, etc.).

Incluir accesibilidad (a11y) en todos los elementos interactivos (aria-label, tabIndex, navegación con teclado).

Priorizar la mejor experiencia de usuario: rapidez, accesibilidad, claridad y fluidez.

Usar Axios con buenas prácticas: interceptores, manejo de errores global y separación por servicios.

🧠 Flujo de trabajo e implementación
Antes de escribir código, describe el enfoque que seguirás con pseudocódigo detallado paso a paso.

Luego, confirma que el enfoque es correcto antes de codificar.

Todo el código debe ser:

Funcional, completo y sin partes faltantes

Legible, mantenible, DRY (Don't Repeat Yourself)

Con nombres descriptivos y bien organizados

Sin TODO, sin suposiciones, sin placeholders

🚫 Control de cambios
Cuando se solicite una modificación o nueva funcionalidad:

No modificar código ajeno a la petición, salvo autorización previa o si es estrictamente necesario (y debe ser comunicado antes).